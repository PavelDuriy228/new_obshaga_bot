from aiogram import  Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from db import Event, get_value_by_condition
from other_func import replacer
from keyboards.strelki import create_strelki

router = Router()

@router.callback_query(lambda c: c.data.startswith("join:"))
async def joining (callback: CallbackQuery):
    # id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    id = int(callback.data.split(":")[1])
    event = await Event.set_by_id(id=id)

    user_id = callback.from_user.id
    username = callback.from_user.username
    
    #  –î–û–±–∞–≤–ª–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —É–∂–µ —Å—É—â—â–µ—Ç—Å–≤—É—é—â–∏–º (–í —Å—Ç–æ–ª–±—Ü–µ —Å –∏–≤–µ–Ω—Ç–∞–º–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–¥ –Ω–æ–≤–æ–≥–æ)
    await replacer(
        table="Users", column="codes_events", condition_column='tg_id',
        condition_value=user_id, value_for_replace='_52nothing52_', value_to_replace=id
    )
    #  –î–û–±–∞–≤–ª–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —É–∂–µ —Å—É—â—â–µ—Ç—Å–≤—É—é—â–∏–º (–í —Å—Ç–æ–ª–±—Ü–µ —Å –∏–≤–µ–Ω—Ç–∞–º–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–¥ –Ω–æ–≤–æ–≥–æ
    await replacer(
        table="Events", column="joined_users_id", condition_column='unic_kod',
        condition_value=id, value_for_replace='_52nothing52_', value_to_replace=user_id
    )
    await replacer (
        table="Events", column="joined_users_username", condition_column='unic_kod',
        condition_value=id, value_for_replace='_52nothing52_', value_to_replace=username
    )    

    await callback.message.edit_text(
        text= f"–¢–µ–ø–µ—Ä—å –≤—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º \n{event.name}"        
    )

@router.callback_query(lambda c: c.data.startswith("users_events:"))
async def joining (callback: CallbackQuery):
    id = callback.from_user.id
    event_codes = str (await get_value_by_condition(
        table="Users",
        column='codes_events',
        condition_column='tg_id', condition_value=id  
    )).strip()
    page= int(callback.data.split(":")[2])    
    keyboard = []
    keyboard.append(
        [InlineKeyboardButton(text="üè†–î–æ–º–æ–π", callback_data=f"home_stud:{id}")]
    )    

    if event_codes !="None": list_id = [code.strip() for code in event_codes.split(" ") if code != ""]  
    if list_id and len(list_id)>0:                
        print(list_id)          
        try:            
            event = await Event.set_by_id(id=list_id[page])
            text = event.text            
            keyboard.append(
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"user_otmena:{id}:{list_id[page]}")]
            )
        except Exception as e:
            text="–í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        strelki = await create_strelki(
            len_list=len(list_id), 
            callback_dataU=f"users_events:{id}",
            page= page
        )
        if strelki: keyboard.append(strelki)
        
    else:
        text="–∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç"
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text(text=text,reply_markup= markup)

@router.callback_query(lambda c: c.data.startswith("user_otmena:"))
async def joining (callback: CallbackQuery):
    id = callback.from_user.id
    id_event= int(callback.data.split(":")[2])

    event = await Event.set_by_id(id=id_event)
    # –ó–∞–º–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ Just_users –≤ –∫–æ–ª–æ–Ω–∫–µ —Å –µ–≥–æ –∏–≤–µ–Ω—Ç–∞–º–∏ id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ id –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    await replacer(
        table="Users", column="codes_events", condition_column='tg_id',
        condition_value=id, value_for_replace=id_event, value_to_replace=''
    )
    # –ó–ê–º–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–≤–µ–Ω—Ç–æ–≤ id —Å–ª–µ–¥—è—â–µ–≥–æ –∑–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º —é–∑–µ—Ä–∞ –Ω–∞ ""
    await replacer(
        table="Events", column="joined_users_id", condition_column='unic_kod',
        condition_value=id_event, value_for_replace=id, value_to_replace=''
    )
    # –ó–∞–º–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–≤–µ–Ω—Ç–æ–≤ username
    await replacer(
        table="Events", column="joined_users_username", condition_column='unic_kod',
        condition_value=id_event, value_for_replace=callback.from_user.username, 
        value_to_replace=''
    )

    await callback.message.answer(text = f"–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —ç—Ç–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º\n{event.name}")